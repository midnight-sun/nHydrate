//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace nHydrate.Dsl
{
	/// <summary>
	/// DomainRelationship nHydrateModelHasEntities
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate.Dsl.nHydrateModelHasEntities.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate.Dsl.nHydrateModelHasEntities.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate.Dsl.nHydrateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("cd23608d-a10a-4e2e-9ff7-0897d5701618")]
	public partial class nHydrateModelHasEntities : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// nHydrateModelHasEntities domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcd23608d, 0xa10a, 0x4e2e, 0x9f, 0xf7, 0x08, 0x97, 0xd5, 0x70, 0x16, 0x18);
	
				
		/// <summary>
		/// Constructor
		/// Creates a nHydrateModelHasEntities link in the same Partition as the given nHydrateModel
		/// </summary>
		/// <param name="source">nHydrateModel to use as the source of the relationship.</param>
		/// <param name="target">Entity to use as the target of the relationship.</param>
		public nHydrateModelHasEntities(nHydrateModel source, Entity target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(nHydrateModelHasEntities.nHydrateModelDomainRoleId, source), new DslModeling::RoleAssignment(nHydrateModelHasEntities.EntityDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public nHydrateModelHasEntities(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public nHydrateModelHasEntities(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public nHydrateModelHasEntities(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public nHydrateModelHasEntities(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region nHydrateModel domain role code
		
		/// <summary>
		/// nHydrateModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid nHydrateModelDomainRoleId = new global::System.Guid(0xacfa23ed, 0xc266, 0x409f, 0xaf, 0xcc, 0x9c, 0xd9, 0x6d, 0x6f, 0x8f, 0xfc);
		
		/// <summary>
		/// DomainRole nHydrateModel
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.nHydrateModelHasEntities/nHydrateModel.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.nHydrateModelHasEntities/nHydrateModel.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Entities", PropertyDisplayNameKey="nHydrate.Dsl.nHydrateModelHasEntities/nHydrateModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("acfa23ed-c266-409f-afcc-9cd96d6f8ffc")]
		public virtual nHydrateModel nHydrateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (nHydrateModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, nHydrateModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, nHydrateModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access nHydrateModel of a Entity
		/// <summary>
		/// Gets nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static nHydrateModel GetnHydrateModel(Entity element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EntityDomainRoleId) as nHydrateModel;
		}
		
		/// <summary>
		/// Sets nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetnHydrateModel(Entity element, nHydrateModel newnHydrateModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EntityDomainRoleId, newnHydrateModel);
		}
		#endregion
		#region Entity domain role code
		
		/// <summary>
		/// Entity domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityDomainRoleId = new global::System.Guid(0x88e9e580, 0x082f, 0x4a9f, 0xa8, 0xf5, 0xb2, 0x94, 0x21, 0xd8, 0xd5, 0x6a);
		
		/// <summary>
		/// DomainRole Entity
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.nHydrateModelHasEntities/Entity.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.nHydrateModelHasEntities/Entity.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "nHydrateModel", PropertyDisplayNameKey="nHydrate.Dsl.nHydrateModelHasEntities/Entity.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("88e9e580-082f-4a9f-a8f5-b29421d8d56a")]
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Entities of a nHydrateModel
		/// <summary>
		/// Gets a list of Entities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Entity> GetEntities(nHydrateModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Entity>, Entity>(element, nHydrateModelDomainRoleId);
		}
		#endregion
		#region nHydrateModel link accessor
		/// <summary>
		/// Get the list of nHydrateModelHasEntities links to a nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate.Dsl.nHydrateModelHasEntities> GetLinksToEntities ( global::nHydrate.Dsl.nHydrateModel nHydrateModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.nHydrateModelHasEntities>(nHydrateModelInstance, global::nHydrate.Dsl.nHydrateModelHasEntities.nHydrateModelDomainRoleId);
		}
		#endregion
		#region Entity link accessor
		/// <summary>
		/// Get the nHydrateModelHasEntities link to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate.Dsl.nHydrateModelHasEntities GetLinkTonHydrateModel (global::nHydrate.Dsl.Entity entityInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate.Dsl.nHydrateModelHasEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.nHydrateModelHasEntities>(entityInstance, global::nHydrate.Dsl.nHydrateModelHasEntities.EntityDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Entity not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region nHydrateModelHasEntities instance accessors
		
		/// <summary>
		/// Get any nHydrateModelHasEntities links between a given nHydrateModel and a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate.Dsl.nHydrateModelHasEntities> GetLinks( global::nHydrate.Dsl.nHydrateModel source, global::nHydrate.Dsl.Entity target )
		{
			global::System.Collections.Generic.List<global::nHydrate.Dsl.nHydrateModelHasEntities> outLinks = new global::System.Collections.Generic.List<global::nHydrate.Dsl.nHydrateModelHasEntities>();
			global::System.Collections.Generic.IList<global::nHydrate.Dsl.nHydrateModelHasEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.nHydrateModelHasEntities>(source, global::nHydrate.Dsl.nHydrateModelHasEntities.nHydrateModelDomainRoleId);
			foreach ( global::nHydrate.Dsl.nHydrateModelHasEntities link in links )
			{
				if ( target.Equals(link.Entity) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one nHydrateModelHasEntities link between a given nHydrateModeland a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate.Dsl.nHydrateModelHasEntities GetLink( global::nHydrate.Dsl.nHydrateModel source, global::nHydrate.Dsl.Entity target )
		{
			global::System.Collections.Generic.IList<global::nHydrate.Dsl.nHydrateModelHasEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.nHydrateModelHasEntities>(source, global::nHydrate.Dsl.nHydrateModelHasEntities.nHydrateModelDomainRoleId);
			foreach ( global::nHydrate.Dsl.nHydrateModelHasEntities link in links )
			{
				if ( target.Equals(link.Entity) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainRelationship EntityHasEntities
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate.Dsl.EntityHasEntities.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate.Dsl.EntityHasEntities.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate.Dsl.nHydrateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("3ee482ac-9232-4953-b839-df2253d00079")]
	public abstract partial class EntityHasEntitiesBase : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityHasEntities domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3ee482ac, 0x9232, 0x4953, 0xb8, 0x39, 0xdf, 0x22, 0x53, 0xd0, 0x00, 0x79);
	
		// Constructors were not generated for this relationship because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor.
		///// </summary>
		///// <param name="partition">The Partition instance containing this ElementLink</param>
		///// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		///// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		//protected EntityHasEntitiesBase(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, roleAssignments, propertyAssignments)
		//{
		//}
		#endregion
		#region ParentEntity domain role code
		
		/// <summary>
		/// ParentEntity domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentEntityDomainRoleId = new global::System.Guid(0x6b449ed7, 0xd557, 0x4185, 0xac, 0xa4, 0x44, 0x92, 0x13, 0x68, 0xb0, 0x41);
		
		/// <summary>
		/// DomainRole ParentEntity
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.EntityHasEntities/ParentEntity.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.EntityHasEntities/ParentEntity.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ChildEntities", PropertyDisplayNameKey="nHydrate.Dsl.EntityHasEntities/ParentEntity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6b449ed7-d557-4185-aca4-44921368b041")]
		public virtual Entity ParentEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParentEntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParentEntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParentEntity of a Entity
		/// <summary>
		/// Gets a list of ParentEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Entity> GetParentEntity(Entity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Entity>, Entity>(element, ChildEntityDomainRoleId);
		}
		#endregion
		#region ChildEntity domain role code
		
		/// <summary>
		/// ChildEntity domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildEntityDomainRoleId = new global::System.Guid(0xc4467b71, 0x2045, 0x467c, 0xb5, 0x68, 0x0b, 0x53, 0x44, 0xff, 0x06, 0xda);
		
		/// <summary>
		/// DomainRole ChildEntity
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.EntityHasEntities/ChildEntity.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.EntityHasEntities/ChildEntity.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ParentEntity", PropertyDisplayNameKey="nHydrate.Dsl.EntityHasEntities/ChildEntity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c4467b71-2045-467c-b568-0b5344ff06da")]
		public virtual Entity ChildEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, ChildEntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ChildEntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ChildEntities of a Entity
		/// <summary>
		/// Gets a list of ChildEntities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Entity> GetChildEntities(Entity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Entity>, Entity>(element, ParentEntityDomainRoleId);
		}
		#endregion
		#region Multiplicity domain property code
		
		/// <summary>
		/// Multiplicity domain property Id.
		/// </summary>
		public static readonly global::System.Guid MultiplicityDomainPropertyId = new global::System.Guid(0x1d1d755e, 0xc8eb, 0x4e62, 0x81, 0xdc, 0xd6, 0x0c, 0xd0, 0xa1, 0x28, 0xdb);
		
		/// <summary>
		/// Storage for Multiplicity
		/// </summary>
		private RelationshipTypeConstants multiplicityPropertyStorage = RelationshipTypeConstants.OneToMany;
		
		/// <summary>
		/// Gets or sets the value of Multiplicity domain property.
		/// Determines the multiplicity of this relationship
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.EntityHasEntities/Multiplicity.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.EntityHasEntities/Multiplicity.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.EntityHasEntities/Multiplicity.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(RelationshipTypeConstants.OneToMany)]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("1d1d755e-c8eb-4e62-81dc-d60cd0a128db")]
		public virtual RelationshipTypeConstants Multiplicity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return multiplicityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MultiplicityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityHasEntities.Multiplicity domain property.
		/// </summary>
		internal sealed partial class MultiplicityPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityHasEntitiesBase, RelationshipTypeConstants>
		{
			private MultiplicityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityHasEntities.Multiplicity domain property value handler.
			/// </summary>
			public static readonly MultiplicityPropertyHandler Instance = new MultiplicityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityHasEntities.Multiplicity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MultiplicityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed RelationshipTypeConstants GetValue(EntityHasEntitiesBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Multiplicity;
				//return element.GetValue<RelationshipTypeConstants>("Multiplicity", element.multiplicityPropertyStorage);
				//return element.multiplicityPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityHasEntitiesBase element, RelationshipTypeConstants newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				RelationshipTypeConstants oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.multiplicityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityHasEntities"));
				}
			}
		}
		
		#endregion
		#region RoleName domain property code
		
		/// <summary>
		/// RoleName domain property Id.
		/// </summary>
		public static readonly global::System.Guid RoleNameDomainPropertyId = new global::System.Guid(0x9b6d5ca2, 0xa1ad, 0x47dc, 0xa1, 0xdb, 0x88, 0x98, 0x88, 0xcb, 0x6a, 0x0e);
		
		/// <summary>
		/// Storage for RoleName
		/// </summary>
		private global::System.String roleNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of RoleName domain property.
		/// The named relation necessary when there is more than one relation between two
		/// entities
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.EntityHasEntities/RoleName.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.EntityHasEntities/RoleName.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.EntityHasEntities/RoleName.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9b6d5ca2-a1ad-47dc-a1db-889888cb6a0e")]
		public virtual global::System.String RoleName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return roleNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RoleNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityHasEntities.RoleName domain property.
		/// </summary>
		internal sealed partial class RoleNamePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityHasEntitiesBase, global::System.String>
		{
			private RoleNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityHasEntities.RoleName domain property value handler.
			/// </summary>
			public static readonly RoleNamePropertyHandler Instance = new RoleNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityHasEntities.RoleName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RoleNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityHasEntitiesBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.RoleName;
				//return element.GetValue<global::System.String>("RoleName", element.roleNamePropertyStorage);
				//return element.roleNamePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityHasEntitiesBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.roleNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityHasEntities"));
				}
			}
		}
		
		#endregion
		#region IsEnforced domain property code
		
		/// <summary>
		/// IsEnforced domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsEnforcedDomainPropertyId = new global::System.Guid(0x483720f5, 0x89eb, 0x40a2, 0x8d, 0x50, 0x19, 0xe5, 0x9a, 0x9c, 0x0e, 0xb2);
		
		/// <summary>
		/// Storage for IsEnforced
		/// </summary>
		private global::System.Boolean isEnforcedPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsEnforced domain property.
		/// Determines if this relationship is enfored in the database or just in code
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.EntityHasEntities/IsEnforced.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.EntityHasEntities/IsEnforced.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.EntityHasEntities/IsEnforced.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("483720f5-89eb-40a2-8d50-19e59a9c0eb2")]
		public virtual global::System.Boolean IsEnforced
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isEnforcedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsEnforcedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityHasEntities.IsEnforced domain property.
		/// </summary>
		internal sealed partial class IsEnforcedPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityHasEntitiesBase, global::System.Boolean>
		{
			private IsEnforcedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityHasEntities.IsEnforced domain property value handler.
			/// </summary>
			public static readonly IsEnforcedPropertyHandler Instance = new IsEnforcedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityHasEntities.IsEnforced domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsEnforcedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(EntityHasEntitiesBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsEnforced;
				//return element.GetValue<global::System.Boolean>("IsEnforced", element.isEnforcedPropertyStorage);
				//return element.isEnforcedPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityHasEntitiesBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isEnforcedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityHasEntities"));
				}
			}
		}
		
		#endregion
		#region ImportData domain property code
		
		/// <summary>
		/// ImportData domain property Id.
		/// </summary>
		public static readonly global::System.Guid ImportDataDomainPropertyId = new global::System.Guid(0x0f07c726, 0x427f, 0x4fe7, 0x81, 0xc3, 0x9c, 0xc6, 0x4c, 0x8f, 0x4d, 0x92);
		
		/// <summary>
		/// Storage for ImportData
		/// </summary>
		private global::System.String importDataPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ImportData domain property.
		/// Internal data to track imports
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.EntityHasEntities/ImportData.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.EntityHasEntities/ImportData.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("0f07c726-427f-4fe7-81c3-9cc64c8f4d92")]
		public virtual global::System.String ImportData
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return importDataPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ImportDataPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityHasEntities.ImportData domain property.
		/// </summary>
		internal sealed partial class ImportDataPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityHasEntitiesBase, global::System.String>
		{
			private ImportDataPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityHasEntities.ImportData domain property value handler.
			/// </summary>
			public static readonly ImportDataPropertyHandler Instance = new ImportDataPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityHasEntities.ImportData domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ImportDataDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityHasEntitiesBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ImportData;
				//return element.GetValue<global::System.String>("ImportData", element.importDataPropertyStorage);
				//return element.importDataPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityHasEntitiesBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.importDataPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityHasEntities"));
				}
			}
		}
		
		#endregion
		#region Summary domain property code
		
		/// <summary>
		/// Summary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SummaryDomainPropertyId = new global::System.Guid(0x4faca3f2, 0x9fc5, 0x48e1, 0xbf, 0xb5, 0xdc, 0x37, 0x4d, 0xa9, 0x80, 0x0d);
		
		/// <summary>
		/// Storage for Summary
		/// </summary>
		private global::System.String summaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Summary domain property.
		/// Determines summary text were applicable
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("nHydrate.Dsl.EntityHasEntities/Summary.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.EntityHasEntities/Summary.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.EntityHasEntities/Summary.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("4faca3f2-9fc5-48e1-bfb5-dc374da9800d")]
		public virtual global::System.String Summary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return summaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityHasEntities.Summary domain property.
		/// </summary>
		internal sealed partial class SummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityHasEntitiesBase, global::System.String>
		{
			private SummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityHasEntities.Summary domain property value handler.
			/// </summary>
			public static readonly SummaryPropertyHandler Instance = new SummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityHasEntities.Summary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityHasEntitiesBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Summary;
				//return element.GetValue<global::System.String>("Summary", element.summaryPropertyStorage);
				//return element.summaryPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityHasEntitiesBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.summaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityHasEntities"));
				}
			}
		}
		
		#endregion
		#region ImportedConstraintName domain property code
		
		/// <summary>
		/// ImportedConstraintName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ImportedConstraintNameDomainPropertyId = new global::System.Guid(0x12b5d330, 0x0160, 0x43eb, 0xb1, 0xca, 0x94, 0xf8, 0x47, 0x81, 0xfa, 0x3c);
		
		/// <summary>
		/// Storage for ImportedConstraintName
		/// </summary>
		private global::System.String importedConstraintNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ImportedConstraintName domain property.
		/// The imported database constraint name
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.EntityHasEntities/ImportedConstraintName.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.EntityHasEntities/ImportedConstraintName.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("12b5d330-0160-43eb-b1ca-94f84781fa3c")]
		public virtual global::System.String ImportedConstraintName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return importedConstraintNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ImportedConstraintNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityHasEntities.ImportedConstraintName domain property.
		/// </summary>
		internal sealed partial class ImportedConstraintNamePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityHasEntitiesBase, global::System.String>
		{
			private ImportedConstraintNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityHasEntities.ImportedConstraintName domain property value handler.
			/// </summary>
			public static readonly ImportedConstraintNamePropertyHandler Instance = new ImportedConstraintNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityHasEntities.ImportedConstraintName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ImportedConstraintNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityHasEntitiesBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ImportedConstraintName;
				//return element.GetValue<global::System.String>("ImportedConstraintName", element.importedConstraintNamePropertyStorage);
				//return element.importedConstraintNamePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityHasEntitiesBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.importedConstraintNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityHasEntities"));
				}
			}
		}
		
		#endregion
		#region DeleteAction domain property code
		
		/// <summary>
		/// DeleteAction domain property Id.
		/// </summary>
		public static readonly global::System.Guid DeleteActionDomainPropertyId = new global::System.Guid(0x64d1611c, 0xa22b, 0x40c1, 0xa3, 0xb0, 0x9b, 0x55, 0xd5, 0x91, 0x49, 0xf6);
		
		/// <summary>
		/// Storage for DeleteAction
		/// </summary>
		private DeleteActionConstants deleteActionPropertyStorage = DeleteActionConstants.NoAction;
		
		/// <summary>
		/// Gets or sets the value of DeleteAction domain property.
		/// Determines the action on chld objects when principal entity is deleted
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.EntityHasEntities/DeleteAction.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.EntityHasEntities/DeleteAction.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(DeleteActionConstants.NoAction)]
		[DslModeling::DomainObjectId("64d1611c-a22b-40c1-a3b0-9b55d59149f6")]
		public virtual DeleteActionConstants DeleteAction
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return deleteActionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DeleteActionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityHasEntities.DeleteAction domain property.
		/// </summary>
		internal sealed partial class DeleteActionPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityHasEntitiesBase, DeleteActionConstants>
		{
			private DeleteActionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityHasEntities.DeleteAction domain property value handler.
			/// </summary>
			public static readonly DeleteActionPropertyHandler Instance = new DeleteActionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityHasEntities.DeleteAction domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DeleteActionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DeleteActionConstants GetValue(EntityHasEntitiesBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.DeleteAction;
				//return element.GetValue<DeleteActionConstants>("DeleteAction", element.deleteActionPropertyStorage);
				//return element.deleteActionPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityHasEntitiesBase element, DeleteActionConstants newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				DeleteActionConstants oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.deleteActionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityHasEntities"));
				}
			}
		}
		
		#endregion
		#region ParentEntity link accessor
		/// <summary>
		/// Get the list of EntityHasEntities links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate.Dsl.EntityHasEntities> GetLinksToChildEntities ( global::nHydrate.Dsl.Entity parentEntityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.EntityHasEntities>(parentEntityInstance, global::nHydrate.Dsl.EntityHasEntities.ParentEntityDomainRoleId);
		}
		#endregion
		#region ChildEntity link accessor
		/// <summary>
		/// Get the list of EntityHasEntities links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate.Dsl.EntityHasEntities> GetLinksToParentEntity ( global::nHydrate.Dsl.Entity childEntityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.EntityHasEntities>(childEntityInstance, global::nHydrate.Dsl.EntityHasEntities.ChildEntityDomainRoleId);
		}
		#endregion
		#region EntityHasEntities instance accessors
		
		/// <summary>
		/// Get any EntityHasEntities links between a given Entity and a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate.Dsl.EntityHasEntities> GetLinks( global::nHydrate.Dsl.Entity source, global::nHydrate.Dsl.Entity target )
		{
			global::System.Collections.Generic.List<global::nHydrate.Dsl.EntityHasEntities> outLinks = new global::System.Collections.Generic.List<global::nHydrate.Dsl.EntityHasEntities>();
			global::System.Collections.Generic.IList<global::nHydrate.Dsl.EntityHasEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.EntityHasEntities>(source, global::nHydrate.Dsl.EntityHasEntities.ParentEntityDomainRoleId);
			foreach ( global::nHydrate.Dsl.EntityHasEntities link in links )
			{
				if ( target.Equals(link.ChildEntity) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
	/// <summary>
	/// DomainRelationship EntityHasEntities
	/// Association relationship between entities
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class EntityHasEntities : EntityHasEntitiesBase
	{
		#region Constructors
		// Constructors were not generated for this relationship because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		//		
		///// <summary>
		///// Constructor
		///// Creates a EntityHasEntities link in the same Partition as the given Entity
		///// </summary>
		///// <param name="source">Entity to use as the source of the relationship.</param>
		///// <param name="target">Entity to use as the target of the relationship.</param>
		//public EntityHasEntities(Entity source, Entity target)
		//	: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityHasEntities.ParentEntityDomainRoleId, source), new DslModeling::RoleAssignment(EntityHasEntities.ChildEntityDomainRoleId, target)}, null)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new link is to be created.</param>
		///// <param name="roleAssignments">List of relationship role assignments.</param>
		//public EntityHasEntities(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
		//	: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new link is to be created.</param>
		///// <param name="roleAssignments">List of relationship role assignments.</param>
		///// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		//public EntityHasEntities(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new link is to be created.</param>
		///// <param name="roleAssignments">List of relationship role assignments.</param>
		//public EntityHasEntities(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
		//	: base(partition, roleAssignments, null)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new link is to be created.</param>
		///// <param name="roleAssignments">List of relationship role assignments.</param>
		///// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		//public EntityHasEntities(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, roleAssignments, propertyAssignments)
		//{
		//}
		#endregion
	}
}
namespace nHydrate.Dsl
{
	/// <summary>
	/// DomainRelationship EntityHasFields
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate.Dsl.EntityHasFields.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate.Dsl.EntityHasFields.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate.Dsl.nHydrateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("a66a58d9-2d27-44e9-8e41-4bc640a0452e")]
	public partial class EntityHasFields : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityHasFields domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa66a58d9, 0x2d27, 0x44e9, 0x8e, 0x41, 0x4b, 0xc6, 0x40, 0xa0, 0x45, 0x2e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityHasFields link in the same Partition as the given Entity
		/// </summary>
		/// <param name="source">Entity to use as the source of the relationship.</param>
		/// <param name="target">Field to use as the target of the relationship.</param>
		public EntityHasFields(Entity source, Field target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityHasFields.EntityDomainRoleId, source), new DslModeling::RoleAssignment(EntityHasFields.FieldDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasFields(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasFields(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasFields(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasFields(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Entity domain role code
		
		/// <summary>
		/// Entity domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityDomainRoleId = new global::System.Guid(0xcccabbdc, 0x2d1f, 0x4d73, 0xb8, 0x12, 0x7b, 0xf8, 0x8b, 0x24, 0x37, 0x4d);
		
		/// <summary>
		/// DomainRole Entity
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.EntityHasFields/Entity.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.EntityHasFields/Entity.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Fields", PropertyDisplayNameKey="nHydrate.Dsl.EntityHasFields/Entity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cccabbdc-2d1f-4d73-b812-7bf88b24374d")]
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Entity of a Field
		/// <summary>
		/// Gets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Entity GetEntity(Field element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FieldDomainRoleId) as Entity;
		}
		
		/// <summary>
		/// Sets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntity(Field element, Entity newEntity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FieldDomainRoleId, newEntity);
		}
		#endregion
		#region Field domain role code
		
		/// <summary>
		/// Field domain role Id.
		/// </summary>
		public static readonly global::System.Guid FieldDomainRoleId = new global::System.Guid(0xf276b3f4, 0xbdf3, 0x42e2, 0xad, 0x29, 0xf6, 0x77, 0x4b, 0x6e, 0x3f, 0x25);
		
		/// <summary>
		/// DomainRole Field
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.EntityHasFields/Field.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.EntityHasFields/Field.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Entity", PropertyDisplayNameKey="nHydrate.Dsl.EntityHasFields/Field.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("f276b3f4-bdf3-42e2-ad29-f6774b6e3f25")]
		public virtual Field Field
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Field)DslModeling::DomainRoleInfo.GetRolePlayer(this, FieldDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FieldDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Fields of a Entity
		/// <summary>
		/// Gets a list of Fields.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Field> GetFields(Entity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(element, EntityDomainRoleId);
		}
		#endregion
		#region Entity link accessor
		/// <summary>
		/// Get the list of EntityHasFields links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate.Dsl.EntityHasFields> GetLinksToFields ( global::nHydrate.Dsl.Entity entityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.EntityHasFields>(entityInstance, global::nHydrate.Dsl.EntityHasFields.EntityDomainRoleId);
		}
		#endregion
		#region Field link accessor
		/// <summary>
		/// Get the EntityHasFields link to a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate.Dsl.EntityHasFields GetLinkToEntity (global::nHydrate.Dsl.Field fieldInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate.Dsl.EntityHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.EntityHasFields>(fieldInstance, global::nHydrate.Dsl.EntityHasFields.FieldDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Field not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityHasFields instance accessors
		
		/// <summary>
		/// Get any EntityHasFields links between a given Entity and a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate.Dsl.EntityHasFields> GetLinks( global::nHydrate.Dsl.Entity source, global::nHydrate.Dsl.Field target )
		{
			global::System.Collections.Generic.List<global::nHydrate.Dsl.EntityHasFields> outLinks = new global::System.Collections.Generic.List<global::nHydrate.Dsl.EntityHasFields>();
			global::System.Collections.Generic.IList<global::nHydrate.Dsl.EntityHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.EntityHasFields>(source, global::nHydrate.Dsl.EntityHasFields.EntityDomainRoleId);
			foreach ( global::nHydrate.Dsl.EntityHasFields link in links )
			{
				if ( target.Equals(link.Field) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityHasFields link between a given Entityand a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate.Dsl.EntityHasFields GetLink( global::nHydrate.Dsl.Entity source, global::nHydrate.Dsl.Field target )
		{
			global::System.Collections.Generic.IList<global::nHydrate.Dsl.EntityHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.EntityHasFields>(source, global::nHydrate.Dsl.EntityHasFields.EntityDomainRoleId);
			foreach ( global::nHydrate.Dsl.EntityHasFields link in links )
			{
				if ( target.Equals(link.Field) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate.Dsl
{
	/// <summary>
	/// DomainRelationship nHydrateModelHasViews
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate.Dsl.nHydrateModelHasViews.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate.Dsl.nHydrateModelHasViews.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate.Dsl.nHydrateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("4d1b0533-9248-40f1-aadc-09d8af388a29")]
	public partial class nHydrateModelHasViews : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// nHydrateModelHasViews domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4d1b0533, 0x9248, 0x40f1, 0xaa, 0xdc, 0x09, 0xd8, 0xaf, 0x38, 0x8a, 0x29);
	
				
		/// <summary>
		/// Constructor
		/// Creates a nHydrateModelHasViews link in the same Partition as the given nHydrateModel
		/// </summary>
		/// <param name="source">nHydrateModel to use as the source of the relationship.</param>
		/// <param name="target">View to use as the target of the relationship.</param>
		public nHydrateModelHasViews(nHydrateModel source, View target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(nHydrateModelHasViews.nHydrateModelDomainRoleId, source), new DslModeling::RoleAssignment(nHydrateModelHasViews.ViewDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public nHydrateModelHasViews(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public nHydrateModelHasViews(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public nHydrateModelHasViews(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public nHydrateModelHasViews(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region nHydrateModel domain role code
		
		/// <summary>
		/// nHydrateModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid nHydrateModelDomainRoleId = new global::System.Guid(0xe99ffbdf, 0xda6c, 0x46a3, 0xab, 0x93, 0xf0, 0x2a, 0xc9, 0x01, 0x8d, 0x5c);
		
		/// <summary>
		/// DomainRole nHydrateModel
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.nHydrateModelHasViews/nHydrateModel.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.nHydrateModelHasViews/nHydrateModel.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Views", PropertyDisplayNameKey="nHydrate.Dsl.nHydrateModelHasViews/nHydrateModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e99ffbdf-da6c-46a3-ab93-f02ac9018d5c")]
		public virtual nHydrateModel nHydrateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (nHydrateModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, nHydrateModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, nHydrateModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access nHydrateModel of a View
		/// <summary>
		/// Gets nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static nHydrateModel GetnHydrateModel(View element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ViewDomainRoleId) as nHydrateModel;
		}
		
		/// <summary>
		/// Sets nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetnHydrateModel(View element, nHydrateModel newnHydrateModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ViewDomainRoleId, newnHydrateModel);
		}
		#endregion
		#region View domain role code
		
		/// <summary>
		/// View domain role Id.
		/// </summary>
		public static readonly global::System.Guid ViewDomainRoleId = new global::System.Guid(0xb16fb4a4, 0x410e, 0x4d49, 0xbc, 0xea, 0x08, 0x80, 0xea, 0xe5, 0xfb, 0xa0);
		
		/// <summary>
		/// DomainRole View
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.nHydrateModelHasViews/View.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.nHydrateModelHasViews/View.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "nHydrateModel", PropertyDisplayNameKey="nHydrate.Dsl.nHydrateModelHasViews/View.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b16fb4a4-410e-4d49-bcea-0880eae5fba0")]
		public virtual View View
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (View)DslModeling::DomainRoleInfo.GetRolePlayer(this, ViewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ViewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Views of a nHydrateModel
		/// <summary>
		/// Gets a list of Views.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<View> GetViews(nHydrateModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<View>, View>(element, nHydrateModelDomainRoleId);
		}
		#endregion
		#region nHydrateModel link accessor
		/// <summary>
		/// Get the list of nHydrateModelHasViews links to a nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate.Dsl.nHydrateModelHasViews> GetLinksToViews ( global::nHydrate.Dsl.nHydrateModel nHydrateModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.nHydrateModelHasViews>(nHydrateModelInstance, global::nHydrate.Dsl.nHydrateModelHasViews.nHydrateModelDomainRoleId);
		}
		#endregion
		#region View link accessor
		/// <summary>
		/// Get the nHydrateModelHasViews link to a View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate.Dsl.nHydrateModelHasViews GetLinkTonHydrateModel (global::nHydrate.Dsl.View viewInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate.Dsl.nHydrateModelHasViews> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.nHydrateModelHasViews>(viewInstance, global::nHydrate.Dsl.nHydrateModelHasViews.ViewDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of View not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region nHydrateModelHasViews instance accessors
		
		/// <summary>
		/// Get any nHydrateModelHasViews links between a given nHydrateModel and a View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate.Dsl.nHydrateModelHasViews> GetLinks( global::nHydrate.Dsl.nHydrateModel source, global::nHydrate.Dsl.View target )
		{
			global::System.Collections.Generic.List<global::nHydrate.Dsl.nHydrateModelHasViews> outLinks = new global::System.Collections.Generic.List<global::nHydrate.Dsl.nHydrateModelHasViews>();
			global::System.Collections.Generic.IList<global::nHydrate.Dsl.nHydrateModelHasViews> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.nHydrateModelHasViews>(source, global::nHydrate.Dsl.nHydrateModelHasViews.nHydrateModelDomainRoleId);
			foreach ( global::nHydrate.Dsl.nHydrateModelHasViews link in links )
			{
				if ( target.Equals(link.View) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one nHydrateModelHasViews link between a given nHydrateModeland a View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate.Dsl.nHydrateModelHasViews GetLink( global::nHydrate.Dsl.nHydrateModel source, global::nHydrate.Dsl.View target )
		{
			global::System.Collections.Generic.IList<global::nHydrate.Dsl.nHydrateModelHasViews> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.nHydrateModelHasViews>(source, global::nHydrate.Dsl.nHydrateModelHasViews.nHydrateModelDomainRoleId);
			foreach ( global::nHydrate.Dsl.nHydrateModelHasViews link in links )
			{
				if ( target.Equals(link.View) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate.Dsl
{
	/// <summary>
	/// DomainRelationship ViewHasFields
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate.Dsl.ViewHasFields.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate.Dsl.ViewHasFields.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate.Dsl.nHydrateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d33ecf57-1d21-4b06-8b2b-9e9d686e2be2")]
	public partial class ViewHasFields : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// ViewHasFields domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd33ecf57, 0x1d21, 0x4b06, 0x8b, 0x2b, 0x9e, 0x9d, 0x68, 0x6e, 0x2b, 0xe2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ViewHasFields link in the same Partition as the given View
		/// </summary>
		/// <param name="source">View to use as the source of the relationship.</param>
		/// <param name="target">ViewField to use as the target of the relationship.</param>
		public ViewHasFields(View source, ViewField target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ViewHasFields.ViewDomainRoleId, source), new DslModeling::RoleAssignment(ViewHasFields.ViewFieldDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewHasFields(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewHasFields(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewHasFields(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewHasFields(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region View domain role code
		
		/// <summary>
		/// View domain role Id.
		/// </summary>
		public static readonly global::System.Guid ViewDomainRoleId = new global::System.Guid(0x5788dafc, 0x4131, 0x4e61, 0xba, 0xbf, 0xc9, 0x13, 0x04, 0x79, 0xfd, 0xc7);
		
		/// <summary>
		/// DomainRole View
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.ViewHasFields/View.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.ViewHasFields/View.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Fields", PropertyDisplayNameKey="nHydrate.Dsl.ViewHasFields/View.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5788dafc-4131-4e61-babf-c9130479fdc7")]
		public virtual View View
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (View)DslModeling::DomainRoleInfo.GetRolePlayer(this, ViewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ViewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access View of a ViewField
		/// <summary>
		/// Gets View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static View GetView(ViewField element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ViewFieldDomainRoleId) as View;
		}
		
		/// <summary>
		/// Sets View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetView(ViewField element, View newView)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ViewFieldDomainRoleId, newView);
		}
		#endregion
		#region ViewField domain role code
		
		/// <summary>
		/// ViewField domain role Id.
		/// </summary>
		public static readonly global::System.Guid ViewFieldDomainRoleId = new global::System.Guid(0x133d0662, 0x8715, 0x4686, 0x83, 0x2e, 0x84, 0x73, 0x9f, 0x6d, 0x91, 0x8a);
		
		/// <summary>
		/// DomainRole ViewField
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.ViewHasFields/ViewField.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.ViewHasFields/ViewField.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "View", PropertyDisplayNameKey="nHydrate.Dsl.ViewHasFields/ViewField.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("133d0662-8715-4686-832e-84739f6d918a")]
		public virtual ViewField ViewField
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ViewField)DslModeling::DomainRoleInfo.GetRolePlayer(this, ViewFieldDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ViewFieldDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Fields of a View
		/// <summary>
		/// Gets a list of Fields.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ViewField> GetFields(View element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ViewField>, ViewField>(element, ViewDomainRoleId);
		}
		#endregion
		#region View link accessor
		/// <summary>
		/// Get the list of ViewHasFields links to a View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate.Dsl.ViewHasFields> GetLinksToFields ( global::nHydrate.Dsl.View viewInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.ViewHasFields>(viewInstance, global::nHydrate.Dsl.ViewHasFields.ViewDomainRoleId);
		}
		#endregion
		#region ViewField link accessor
		/// <summary>
		/// Get the ViewHasFields link to a ViewField.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate.Dsl.ViewHasFields GetLinkToView (global::nHydrate.Dsl.ViewField viewFieldInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate.Dsl.ViewHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.ViewHasFields>(viewFieldInstance, global::nHydrate.Dsl.ViewHasFields.ViewFieldDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ViewField not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ViewHasFields instance accessors
		
		/// <summary>
		/// Get any ViewHasFields links between a given View and a ViewField.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate.Dsl.ViewHasFields> GetLinks( global::nHydrate.Dsl.View source, global::nHydrate.Dsl.ViewField target )
		{
			global::System.Collections.Generic.List<global::nHydrate.Dsl.ViewHasFields> outLinks = new global::System.Collections.Generic.List<global::nHydrate.Dsl.ViewHasFields>();
			global::System.Collections.Generic.IList<global::nHydrate.Dsl.ViewHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.ViewHasFields>(source, global::nHydrate.Dsl.ViewHasFields.ViewDomainRoleId);
			foreach ( global::nHydrate.Dsl.ViewHasFields link in links )
			{
				if ( target.Equals(link.ViewField) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ViewHasFields link between a given Viewand a ViewField.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate.Dsl.ViewHasFields GetLink( global::nHydrate.Dsl.View source, global::nHydrate.Dsl.ViewField target )
		{
			global::System.Collections.Generic.IList<global::nHydrate.Dsl.ViewHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.ViewHasFields>(source, global::nHydrate.Dsl.ViewHasFields.ViewDomainRoleId);
			foreach ( global::nHydrate.Dsl.ViewHasFields link in links )
			{
				if ( target.Equals(link.ViewField) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate.Dsl
{
	/// <summary>
	/// DomainRelationship nHydrateModelHasRelationFields
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate.Dsl.nHydrateModelHasRelationFields.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate.Dsl.nHydrateModelHasRelationFields.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate.Dsl.nHydrateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("72b736b5-132f-4d2c-89b6-23b3d3acd5b3")]
	public partial class nHydrateModelHasRelationFields : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// nHydrateModelHasRelationFields domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x72b736b5, 0x132f, 0x4d2c, 0x89, 0xb6, 0x23, 0xb3, 0xd3, 0xac, 0xd5, 0xb3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a nHydrateModelHasRelationFields link in the same Partition as the given nHydrateModel
		/// </summary>
		/// <param name="source">nHydrateModel to use as the source of the relationship.</param>
		/// <param name="target">RelationField to use as the target of the relationship.</param>
		public nHydrateModelHasRelationFields(nHydrateModel source, RelationField target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(nHydrateModelHasRelationFields.nHydrateModelDomainRoleId, source), new DslModeling::RoleAssignment(nHydrateModelHasRelationFields.RelationFieldDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public nHydrateModelHasRelationFields(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public nHydrateModelHasRelationFields(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public nHydrateModelHasRelationFields(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public nHydrateModelHasRelationFields(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region nHydrateModel domain role code
		
		/// <summary>
		/// nHydrateModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid nHydrateModelDomainRoleId = new global::System.Guid(0x48bbb21d, 0x2233, 0x4bbe, 0xa0, 0xf3, 0x79, 0x79, 0xba, 0x27, 0x12, 0x2d);
		
		/// <summary>
		/// DomainRole nHydrateModel
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.nHydrateModelHasRelationFields/nHydrateModel.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.nHydrateModelHasRelationFields/nHydrateModel.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RelationFields", PropertyDisplayNameKey="nHydrate.Dsl.nHydrateModelHasRelationFields/nHydrateModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("48bbb21d-2233-4bbe-a0f3-7979ba27122d")]
		public virtual nHydrateModel nHydrateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (nHydrateModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, nHydrateModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, nHydrateModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access nHydrateModel of a RelationField
		/// <summary>
		/// Gets nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static nHydrateModel GetnHydrateModel(RelationField element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RelationFieldDomainRoleId) as nHydrateModel;
		}
		
		/// <summary>
		/// Sets nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetnHydrateModel(RelationField element, nHydrateModel newnHydrateModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RelationFieldDomainRoleId, newnHydrateModel);
		}
		#endregion
		#region RelationField domain role code
		
		/// <summary>
		/// RelationField domain role Id.
		/// </summary>
		public static readonly global::System.Guid RelationFieldDomainRoleId = new global::System.Guid(0x74e8ccb4, 0x6cc4, 0x4874, 0x99, 0xbe, 0x1f, 0x93, 0xf1, 0x7e, 0xcd, 0xc1);
		
		/// <summary>
		/// DomainRole RelationField
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.nHydrateModelHasRelationFields/RelationField.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.nHydrateModelHasRelationFields/RelationField.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "nHydrateModel", PropertyDisplayNameKey="nHydrate.Dsl.nHydrateModelHasRelationFields/RelationField.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("74e8ccb4-6cc4-4874-99be-1f93f17ecdc1")]
		public virtual RelationField RelationField
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RelationField)DslModeling::DomainRoleInfo.GetRolePlayer(this, RelationFieldDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RelationFieldDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RelationFields of a nHydrateModel
		/// <summary>
		/// Gets a list of RelationFields.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<RelationField> GetRelationFields(nHydrateModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<RelationField>, RelationField>(element, nHydrateModelDomainRoleId);
		}
		#endregion
		#region nHydrateModel link accessor
		/// <summary>
		/// Get the list of nHydrateModelHasRelationFields links to a nHydrateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate.Dsl.nHydrateModelHasRelationFields> GetLinksToRelationFields ( global::nHydrate.Dsl.nHydrateModel nHydrateModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.nHydrateModelHasRelationFields>(nHydrateModelInstance, global::nHydrate.Dsl.nHydrateModelHasRelationFields.nHydrateModelDomainRoleId);
		}
		#endregion
		#region RelationField link accessor
		/// <summary>
		/// Get the nHydrateModelHasRelationFields link to a RelationField.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate.Dsl.nHydrateModelHasRelationFields GetLinkTonHydrateModel (global::nHydrate.Dsl.RelationField relationFieldInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate.Dsl.nHydrateModelHasRelationFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.nHydrateModelHasRelationFields>(relationFieldInstance, global::nHydrate.Dsl.nHydrateModelHasRelationFields.RelationFieldDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RelationField not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region nHydrateModelHasRelationFields instance accessors
		
		/// <summary>
		/// Get any nHydrateModelHasRelationFields links between a given nHydrateModel and a RelationField.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate.Dsl.nHydrateModelHasRelationFields> GetLinks( global::nHydrate.Dsl.nHydrateModel source, global::nHydrate.Dsl.RelationField target )
		{
			global::System.Collections.Generic.List<global::nHydrate.Dsl.nHydrateModelHasRelationFields> outLinks = new global::System.Collections.Generic.List<global::nHydrate.Dsl.nHydrateModelHasRelationFields>();
			global::System.Collections.Generic.IList<global::nHydrate.Dsl.nHydrateModelHasRelationFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.nHydrateModelHasRelationFields>(source, global::nHydrate.Dsl.nHydrateModelHasRelationFields.nHydrateModelDomainRoleId);
			foreach ( global::nHydrate.Dsl.nHydrateModelHasRelationFields link in links )
			{
				if ( target.Equals(link.RelationField) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one nHydrateModelHasRelationFields link between a given nHydrateModeland a RelationField.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate.Dsl.nHydrateModelHasRelationFields GetLink( global::nHydrate.Dsl.nHydrateModel source, global::nHydrate.Dsl.RelationField target )
		{
			global::System.Collections.Generic.IList<global::nHydrate.Dsl.nHydrateModelHasRelationFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.nHydrateModelHasRelationFields>(source, global::nHydrate.Dsl.nHydrateModelHasRelationFields.nHydrateModelDomainRoleId);
			foreach ( global::nHydrate.Dsl.nHydrateModelHasRelationFields link in links )
			{
				if ( target.Equals(link.RelationField) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate.Dsl
{
	/// <summary>
	/// DomainRelationship EntityHasStaticDatum
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate.Dsl.EntityHasStaticDatum.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate.Dsl.EntityHasStaticDatum.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate.Dsl.nHydrateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("b1472bb7-1e34-4d07-b001-d36410e89265")]
	public partial class EntityHasStaticDatum : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityHasStaticDatum domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb1472bb7, 0x1e34, 0x4d07, 0xb0, 0x01, 0xd3, 0x64, 0x10, 0xe8, 0x92, 0x65);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityHasStaticDatum link in the same Partition as the given Entity
		/// </summary>
		/// <param name="source">Entity to use as the source of the relationship.</param>
		/// <param name="target">StaticData to use as the target of the relationship.</param>
		public EntityHasStaticDatum(Entity source, StaticData target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityHasStaticDatum.EntityDomainRoleId, source), new DslModeling::RoleAssignment(EntityHasStaticDatum.StaticDataDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasStaticDatum(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasStaticDatum(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasStaticDatum(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasStaticDatum(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Entity domain role code
		
		/// <summary>
		/// Entity domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityDomainRoleId = new global::System.Guid(0x8f45174c, 0x512a, 0x489a, 0x84, 0x02, 0x13, 0xb6, 0xeb, 0x56, 0x0b, 0xe3);
		
		/// <summary>
		/// DomainRole Entity
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.EntityHasStaticDatum/Entity.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.EntityHasStaticDatum/Entity.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "StaticDatum", PropertyDisplayNameKey="nHydrate.Dsl.EntityHasStaticDatum/Entity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8f45174c-512a-489a-8402-13b6eb560be3")]
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Entity of a StaticData
		/// <summary>
		/// Gets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Entity GetEntity(StaticData element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, StaticDataDomainRoleId) as Entity;
		}
		
		/// <summary>
		/// Sets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntity(StaticData element, Entity newEntity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, StaticDataDomainRoleId, newEntity);
		}
		#endregion
		#region StaticData domain role code
		
		/// <summary>
		/// StaticData domain role Id.
		/// </summary>
		public static readonly global::System.Guid StaticDataDomainRoleId = new global::System.Guid(0x5c59db95, 0xcf44, 0x4553, 0xa2, 0x96, 0x84, 0xce, 0x04, 0x52, 0x96, 0xc5);
		
		/// <summary>
		/// DomainRole StaticData
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.EntityHasStaticDatum/StaticData.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.EntityHasStaticDatum/StaticData.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Entity", PropertyDisplayNameKey="nHydrate.Dsl.EntityHasStaticDatum/StaticData.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5c59db95-cf44-4553-a296-84ce045296c5")]
		public virtual StaticData StaticData
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (StaticData)DslModeling::DomainRoleInfo.GetRolePlayer(this, StaticDataDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, StaticDataDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access StaticDatum of a Entity
		/// <summary>
		/// Gets a list of StaticDatum.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<StaticData> GetStaticDatum(Entity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<StaticData>, StaticData>(element, EntityDomainRoleId);
		}
		#endregion
		#region Entity link accessor
		/// <summary>
		/// Get the list of EntityHasStaticDatum links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate.Dsl.EntityHasStaticDatum> GetLinksToStaticDatum ( global::nHydrate.Dsl.Entity entityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.EntityHasStaticDatum>(entityInstance, global::nHydrate.Dsl.EntityHasStaticDatum.EntityDomainRoleId);
		}
		#endregion
		#region StaticData link accessor
		/// <summary>
		/// Get the EntityHasStaticDatum link to a StaticData.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate.Dsl.EntityHasStaticDatum GetLinkToEntity (global::nHydrate.Dsl.StaticData staticDataInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate.Dsl.EntityHasStaticDatum> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.EntityHasStaticDatum>(staticDataInstance, global::nHydrate.Dsl.EntityHasStaticDatum.StaticDataDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of StaticData not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityHasStaticDatum instance accessors
		
		/// <summary>
		/// Get any EntityHasStaticDatum links between a given Entity and a StaticData.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate.Dsl.EntityHasStaticDatum> GetLinks( global::nHydrate.Dsl.Entity source, global::nHydrate.Dsl.StaticData target )
		{
			global::System.Collections.Generic.List<global::nHydrate.Dsl.EntityHasStaticDatum> outLinks = new global::System.Collections.Generic.List<global::nHydrate.Dsl.EntityHasStaticDatum>();
			global::System.Collections.Generic.IList<global::nHydrate.Dsl.EntityHasStaticDatum> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.EntityHasStaticDatum>(source, global::nHydrate.Dsl.EntityHasStaticDatum.EntityDomainRoleId);
			foreach ( global::nHydrate.Dsl.EntityHasStaticDatum link in links )
			{
				if ( target.Equals(link.StaticData) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityHasStaticDatum link between a given Entityand a StaticData.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate.Dsl.EntityHasStaticDatum GetLink( global::nHydrate.Dsl.Entity source, global::nHydrate.Dsl.StaticData target )
		{
			global::System.Collections.Generic.IList<global::nHydrate.Dsl.EntityHasStaticDatum> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.EntityHasStaticDatum>(source, global::nHydrate.Dsl.EntityHasStaticDatum.EntityDomainRoleId);
			foreach ( global::nHydrate.Dsl.EntityHasStaticDatum link in links )
			{
				if ( target.Equals(link.StaticData) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate.Dsl
{
	/// <summary>
	/// DomainRelationship EntityHasIndexes
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate.Dsl.EntityHasIndexes.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate.Dsl.EntityHasIndexes.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate.Dsl.nHydrateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("1caea208-6608-47d1-a106-efb54a86e7c4")]
	public partial class EntityHasIndexes : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityHasIndexes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1caea208, 0x6608, 0x47d1, 0xa1, 0x06, 0xef, 0xb5, 0x4a, 0x86, 0xe7, 0xc4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityHasIndexes link in the same Partition as the given Entity
		/// </summary>
		/// <param name="source">Entity to use as the source of the relationship.</param>
		/// <param name="target">Index to use as the target of the relationship.</param>
		public EntityHasIndexes(Entity source, Index target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityHasIndexes.EntityDomainRoleId, source), new DslModeling::RoleAssignment(EntityHasIndexes.IndexDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasIndexes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasIndexes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasIndexes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasIndexes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Entity domain role code
		
		/// <summary>
		/// Entity domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityDomainRoleId = new global::System.Guid(0x7c69ce01, 0xab6b, 0x4507, 0xbe, 0xdd, 0xfa, 0x78, 0x4b, 0x25, 0xa4, 0x93);
		
		/// <summary>
		/// DomainRole Entity
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.EntityHasIndexes/Entity.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.EntityHasIndexes/Entity.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Indexes", PropertyDisplayNameKey="nHydrate.Dsl.EntityHasIndexes/Entity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7c69ce01-ab6b-4507-bedd-fa784b25a493")]
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Entity of a Index
		/// <summary>
		/// Gets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Entity GetEntity(Index element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, IndexDomainRoleId) as Entity;
		}
		
		/// <summary>
		/// Sets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntity(Index element, Entity newEntity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, IndexDomainRoleId, newEntity);
		}
		#endregion
		#region Index domain role code
		
		/// <summary>
		/// Index domain role Id.
		/// </summary>
		public static readonly global::System.Guid IndexDomainRoleId = new global::System.Guid(0xc33e52e0, 0x17e7, 0x44c7, 0x89, 0x8b, 0x75, 0x26, 0x39, 0x62, 0xed, 0xf6);
		
		/// <summary>
		/// DomainRole Index
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.EntityHasIndexes/Index.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.EntityHasIndexes/Index.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Entity", PropertyDisplayNameKey="nHydrate.Dsl.EntityHasIndexes/Index.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c33e52e0-17e7-44c7-898b-75263962edf6")]
		public virtual Index Index
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Index)DslModeling::DomainRoleInfo.GetRolePlayer(this, IndexDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IndexDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Indexes of a Entity
		/// <summary>
		/// Gets a list of Indexes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Index> GetIndexes(Entity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Index>, Index>(element, EntityDomainRoleId);
		}
		#endregion
		#region Entity link accessor
		/// <summary>
		/// Get the list of EntityHasIndexes links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate.Dsl.EntityHasIndexes> GetLinksToIndexes ( global::nHydrate.Dsl.Entity entityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.EntityHasIndexes>(entityInstance, global::nHydrate.Dsl.EntityHasIndexes.EntityDomainRoleId);
		}
		#endregion
		#region Index link accessor
		/// <summary>
		/// Get the EntityHasIndexes link to a Index.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate.Dsl.EntityHasIndexes GetLinkToEntity (global::nHydrate.Dsl.Index indexInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate.Dsl.EntityHasIndexes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.EntityHasIndexes>(indexInstance, global::nHydrate.Dsl.EntityHasIndexes.IndexDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Index not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityHasIndexes instance accessors
		
		/// <summary>
		/// Get any EntityHasIndexes links between a given Entity and a Index.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate.Dsl.EntityHasIndexes> GetLinks( global::nHydrate.Dsl.Entity source, global::nHydrate.Dsl.Index target )
		{
			global::System.Collections.Generic.List<global::nHydrate.Dsl.EntityHasIndexes> outLinks = new global::System.Collections.Generic.List<global::nHydrate.Dsl.EntityHasIndexes>();
			global::System.Collections.Generic.IList<global::nHydrate.Dsl.EntityHasIndexes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.EntityHasIndexes>(source, global::nHydrate.Dsl.EntityHasIndexes.EntityDomainRoleId);
			foreach ( global::nHydrate.Dsl.EntityHasIndexes link in links )
			{
				if ( target.Equals(link.Index) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityHasIndexes link between a given Entityand a Index.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate.Dsl.EntityHasIndexes GetLink( global::nHydrate.Dsl.Entity source, global::nHydrate.Dsl.Index target )
		{
			global::System.Collections.Generic.IList<global::nHydrate.Dsl.EntityHasIndexes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.EntityHasIndexes>(source, global::nHydrate.Dsl.EntityHasIndexes.EntityDomainRoleId);
			foreach ( global::nHydrate.Dsl.EntityHasIndexes link in links )
			{
				if ( target.Equals(link.Index) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace nHydrate.Dsl
{
	/// <summary>
	/// DomainRelationship IndexHasIndexColumns
	/// Description for nHydrate.Dsl.IndexHasIndexColumns
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate.Dsl.IndexHasIndexColumns.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate.Dsl.IndexHasIndexColumns.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate.Dsl.nHydrateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f50821c9-7d23-4ae4-a1f0-1051f9ae551b")]
	public partial class IndexHasIndexColumns : DslModeling::ElementLink, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
		
		/// <summary>
		/// IndexHasIndexColumns domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf50821c9, 0x7d23, 0x4ae4, 0xa1, 0xf0, 0x10, 0x51, 0xf9, 0xae, 0x55, 0x1b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a IndexHasIndexColumns link in the same Partition as the given Index
		/// </summary>
		/// <param name="source">Index to use as the source of the relationship.</param>
		/// <param name="target">IndexColumn to use as the target of the relationship.</param>
		public IndexHasIndexColumns(Index source, IndexColumn target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(IndexHasIndexColumns.IndexDomainRoleId, source), new DslModeling::RoleAssignment(IndexHasIndexColumns.IndexColumnDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IndexHasIndexColumns(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IndexHasIndexColumns(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IndexHasIndexColumns(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IndexHasIndexColumns(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Index domain role code
		
		/// <summary>
		/// Index domain role Id.
		/// </summary>
		public static readonly global::System.Guid IndexDomainRoleId = new global::System.Guid(0x48eb9827, 0xed57, 0x4196, 0x81, 0x4f, 0xef, 0xe6, 0x04, 0x5b, 0xd2, 0x13);
		
		/// <summary>
		/// DomainRole Index
		/// Description for nHydrate.Dsl.IndexHasIndexColumns.Index
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.IndexHasIndexColumns/Index.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.IndexHasIndexColumns/Index.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "IndexColumns", PropertyDisplayNameKey="nHydrate.Dsl.IndexHasIndexColumns/Index.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("48eb9827-ed57-4196-814f-efe6045bd213")]
		public virtual Index Index
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Index)DslModeling::DomainRoleInfo.GetRolePlayer(this, IndexDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IndexDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Index of a IndexColumn
		/// <summary>
		/// Gets Index.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Index GetIndex(IndexColumn element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, IndexColumnDomainRoleId) as Index;
		}
		
		/// <summary>
		/// Sets Index.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetIndex(IndexColumn element, Index newIndex)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, IndexColumnDomainRoleId, newIndex);
		}
		#endregion
		#region IndexColumn domain role code
		
		/// <summary>
		/// IndexColumn domain role Id.
		/// </summary>
		public static readonly global::System.Guid IndexColumnDomainRoleId = new global::System.Guid(0x2312ab11, 0x6be2, 0x4b81, 0x8c, 0x39, 0x7e, 0x78, 0x8e, 0xe1, 0xfd, 0xcb);
		
		/// <summary>
		/// DomainRole IndexColumn
		/// Description for nHydrate.Dsl.IndexHasIndexColumns.IndexColumn
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.IndexHasIndexColumns/IndexColumn.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.IndexHasIndexColumns/IndexColumn.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Index", PropertyDisplayNameKey="nHydrate.Dsl.IndexHasIndexColumns/IndexColumn.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("2312ab11-6be2-4b81-8c39-7e788ee1fdcb")]
		public virtual IndexColumn IndexColumn
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (IndexColumn)DslModeling::DomainRoleInfo.GetRolePlayer(this, IndexColumnDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IndexColumnDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IndexColumns of a Index
		/// <summary>
		/// Gets a list of IndexColumns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<IndexColumn> GetIndexColumns(Index element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<IndexColumn>, IndexColumn>(element, IndexDomainRoleId);
		}
		#endregion
		#region Index link accessor
		/// <summary>
		/// Get the list of IndexHasIndexColumns links to a Index.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate.Dsl.IndexHasIndexColumns> GetLinksToIndexColumns ( global::nHydrate.Dsl.Index indexInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.IndexHasIndexColumns>(indexInstance, global::nHydrate.Dsl.IndexHasIndexColumns.IndexDomainRoleId);
		}
		#endregion
		#region IndexColumn link accessor
		/// <summary>
		/// Get the IndexHasIndexColumns link to a IndexColumn.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate.Dsl.IndexHasIndexColumns GetLinkToIndex (global::nHydrate.Dsl.IndexColumn indexColumnInstance)
		{
			global::System.Collections.Generic.IList<global::nHydrate.Dsl.IndexHasIndexColumns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.IndexHasIndexColumns>(indexColumnInstance, global::nHydrate.Dsl.IndexHasIndexColumns.IndexColumnDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of IndexColumn not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region IndexHasIndexColumns instance accessors
		
		/// <summary>
		/// Get any IndexHasIndexColumns links between a given Index and a IndexColumn.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::nHydrate.Dsl.IndexHasIndexColumns> GetLinks( global::nHydrate.Dsl.Index source, global::nHydrate.Dsl.IndexColumn target )
		{
			global::System.Collections.Generic.List<global::nHydrate.Dsl.IndexHasIndexColumns> outLinks = new global::System.Collections.Generic.List<global::nHydrate.Dsl.IndexHasIndexColumns>();
			global::System.Collections.Generic.IList<global::nHydrate.Dsl.IndexHasIndexColumns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.IndexHasIndexColumns>(source, global::nHydrate.Dsl.IndexHasIndexColumns.IndexDomainRoleId);
			foreach ( global::nHydrate.Dsl.IndexHasIndexColumns link in links )
			{
				if ( target.Equals(link.IndexColumn) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one IndexHasIndexColumns link between a given Indexand a IndexColumn.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::nHydrate.Dsl.IndexHasIndexColumns GetLink( global::nHydrate.Dsl.Index source, global::nHydrate.Dsl.IndexColumn target )
		{
			global::System.Collections.Generic.IList<global::nHydrate.Dsl.IndexHasIndexColumns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::nHydrate.Dsl.IndexHasIndexColumns>(source, global::nHydrate.Dsl.IndexHasIndexColumns.IndexDomainRoleId);
			foreach ( global::nHydrate.Dsl.IndexHasIndexColumns link in links )
			{
				if ( target.Equals(link.IndexColumn) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
